#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Bio::Phylo::Forest::DBTree;
use Bio::Phylo::Util::Logger ':levels';

# process command line arguments
my $verbosity = WARN;
my ( $infile, $dbfile );
GetOptions(
	'verbose+' => \$verbosity,
	'infile=s' => \$infile,
	'dbfile=s' => \$dbfile,
);

# instantiate helper objects
my $log = Bio::Phylo::Util::Logger->new(
	'-level' => $verbosity,
	'-class' => 'main',
);

# set up database stuff
my ( $sth, $megatree, $dbh );
if ( $dbfile ) {
	if ( -e $dbfile ) {
		$log->fatal("$dbfile already exists, won't overwrite");
		exit(1);
	}
	$log->info("will insert megatree directly into db '$dbfile'");
	$megatree = Bio::Phylo::Forest::DBTree->connect($dbfile);
	$dbh = $megatree->dbh;
	$sth = $dbh->prepare("insert into node(id,parent,name,length) values(?,?,?,?)");
}
else {
	$log->warn("no db file given, CSV output will be written to STDOUT");
}

# do the thing
my $idcounter = 2;
my %idcache;
read_tree();
if ( $megatree ) {
	$log->info("going to compute indexes");
	$megatree->get_root->_index;
}

# start reading the phylotree spreadsheet
sub read_tree {
	open my $fh, '<', $infile or die $!;
	my ( $depth, @path );
	my $line = 1;
	LINE: while(<$fh>) {

		# compute depth of current line
		chomp;
		my $d;
		my @line = split /\t/, $_;
		FIELD: for my $i ( 0 .. $#line ) {
			if ( $line[$i] ) {
				$d = $i;
				last FIELD;	
			}
		}
	
		# parse id and snps
		my ( $id, $SNPs ) = grep { /\S/ } @line;
		$id = "$line - $id";
		my $label = $SNPs ? "$id / $SNPs" : $id;
	
		# update topology
		$path[$d] = $label;
	
		# node is root
		if ( not defined $depth ) {
			$depth = $d;
			print_branch( $label );
		}
		else {
	
			# find focal node
			my $parent;
			PARENT: for ( my $i = $d - 1; $i >= 0; $i-- ) {
				if ( $path[$i] ) {
					$parent = $path[$i];
					last PARENT;
				}
			}			
			print_branch( $label => $parent );
		}
		$line++;
	}
}

# print focal branch
sub print_branch {
	my ( $child, $parent ) = @_;
	
	# every child and parent ID consists of the concatenation of:
	# <line number> - <identifier> / <space separated SNPs>
	# first strip of the '<line number> - '
	my $label = $child;
	$label =~ s/^\d+ - //;
	
	# now compute the length:
	my $length = 1;
	if ( $label =~ /\/ (.+)/ ) {
		my $SNPs = $1;
		my @SNPs = split / /, $SNPs;
		$length  = scalar @SNPs;
	}
	
	# send the output to doprint()
	if ( $parent ) {
		$idcache{$child}  = $idcounter++ unless $idcache{$child};
		$idcache{$parent} = $idcounter++ unless $idcache{$parent};	
		doprint($idcache{$child},$idcache{$parent},$label,$length);
	}
	else {
		$idcache{$child} = $idcounter++ unless $idcache{$child};
		doprint($idcache{$child},1,$label,$length);
	}
}

# produce output to CSV or DATABASE
sub doprint {
	my @values = @_;
	if ( $sth ) {
		$sth->execute(@values);
	}
	else {
		print join(',',@values), "\n";
	}
}